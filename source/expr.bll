; ModuleId = 'expr.'
source_filename = "../examples/expr.bcs"
@0 = global [2 x i8] c"\0A\00"

define i32 @printint(i32 %0) {
entry:
    %n = alloca i32
    store i32 %0, ptr %n
    %1 = load i32, ptr %n
    call void @putint(i32  %1)
    %3 = getelementptr [2 x i8], ptr @0, i32 0, i32 0
    call void @puts(ptr %3)
    ret i32 0
}
define void @main() {
entry:
    %0 = icmp ne i32 0, 0
    %1 = icmp ne i32 0, 0
    %2 = and i1 %0, %1
    %3 = zext i1 %2 to i32
    %4 = call i32 @printint(i32 %3)
    %5 = icmp ne i32 0, 0
    %6 = icmp ne i32 1, 0
    %7 = and i1 %5, %6
    %8 = zext i1 %7 to i32
    %9 = call i32 @printint(i32 %8)
    %10 = icmp ne i32 1, 0
    %11 = icmp ne i32 1, 0
    %12 = and i1 %10, %11
    %13 = zext i1 %12 to i32
    %14 = call i32 @printint(i32 %13)
    %15 = icmp eq i32 2, 2
    %16 = zext i1 %15 to i32
    %17 = call i32 @printint(i32 %16)
    %18 = icmp ne i32 2, 2
    %19 = zext i1 %18 to i32
    %20 = call i32 @printint(i32 %19)
    %21 = icmp sge i32 10, 10
    %22 = zext i1 %21 to i32
    %23 = call i32 @printint(i32 %22)
    %24 = icmp sgt i32 10, 10
    %25 = zext i1 %24 to i32
    %26 = call i32 @printint(i32 %25)
    %27 = icmp sle i32 4, 4
    %28 = zext i1 %27 to i32
    %29 = call i32 @printint(i32 %28)
    %30 = icmp sle i32 4, 5
    %31 = zext i1 %30 to i32
    %32 = call i32 @printint(i32 %31)
    %33 = icmp ne i32 4, 0
    %34 = icmp ne i32 4, 0
    %35 = or i1 %33, %34
    %36 = zext i1 %35 to i32
    %37 = call i32 @printint(i32 %36)
    %38 = icmp ne i32 0, 0
    %39 = icmp ne i32 0, 0
    %40 = or i1 %38, %39
    %41 = zext i1 %40 to i32
    %42 = call i32 @printint(i32 %41)
    ret void
}

declare void @putint(i32 %0)
declare void @puts(ptr %0)


